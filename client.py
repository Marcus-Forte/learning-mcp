import asyncio
import json
import os
from dotenv import load_dotenv
from google import genai
from google.genai import types
from mcp import ClientSession
from mcp.client.streamable_http import streamablehttp_client

load_dotenv()

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

async def run():
    async with streamablehttp_client("http://localhost:8000/mcp/") as (
        read_stream,
        write_stream,
        _,
    ):
        async with ClientSession(read_stream, write_stream) as session:
            
            prompt = "Whats 5 plus 1?" # should be 20!

            await session.initialize()

            mcp_tools = await session.list_tools()

            # Remove debug prints
            tools = [
                types.Tool(
                    function_declarations=[
                        {
                            "name": tool.name,
                            "description": tool.description,
                            "parameters": {
                                k: v
                                for k, v in tool.inputSchema.items()
                                if k not in ["additionalProperties", "$schema"]
                            },
                        }
                    ]
                )
                for tool in mcp_tools.tools
            ]
            # Remove debug prints

            print("Available tools:", mcp_tools.tools)

            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0,
                    tools=tools,
                ),
            )

            # Remove raw response print
            if response.candidates[0].content.parts[0].function_call:
                function_call = response.candidates[0].content.parts[0].function_call

                result = await session.call_tool(
                    function_call.name, arguments=dict(function_call.args)
                )

                # Parse and print formatted JSON result
                print("--- Formatted Result ---") # Add header for clarity
                try:
                    result = json.loads(result.content[0].text)
                    print(result)
                except json.JSONDecodeError:
                    print("MCP server returned non-JSON response:")
                    print(result.content[0].text)
                except (IndexError, AttributeError):
                     print("Unexpected result structure from MCP server:")
                     print(result)
            else:
                print("No function call was generated by the model.")
                if response.text:
                     print("Model response:")
                     print(response.text)

            # Example: call the 'add' tool
            # result = await session.call_tool("add", arguments={"a": 2, "b": 8})
            # print("add(2, 3) =", result.content[0].text)

asyncio.run(run())